function test_flac1() {
  $(dirname $0)/../bin/flac2alac "$TEST_FLAC1"
  ALAC_FILE="$(dirname $TEST_FLAC1)/flac1.m4a"

  assertTrue    "should have an alac file" \
                "[ -s '$ALAC_FILE' ]"

  assertEquals  "should return artist" \
                "John Mayer"     \
                "`get_tag_from_alac $ALAC_FILE artist`"

  assertEquals  "should return title" \
                "Banter #7"     \
                "`get_tag_from_alac $ALAC_FILE title`"

  assertFalse   "should not return album_artist" \
                "get_tag_from_alac $ALAC_FILE album_artist"


  assertEquals  "should return album" \
                "2013-04-25, Tuscaloosa Amphitheater, Tuscaloosa, AL"     \
                "`get_tag_from_alac $ALAC_FILE album`"

  assertEquals  "should return date" \
                "2013"     \
                "`get_tag_from_alac $ALAC_FILE date`"

  assertFalse   "should not have a genre" \
                "get_tag_from_flac $ALAC_FILE genre"

  assertEquals  "should return track_number" \
                "16"     \
                "`get_tag_from_alac $ALAC_FILE track_number`"

  assertFalse   "should not return track_total" \
                "get_tag_from_alac $ALAC_FILE track_total"

  assertFalse   "should not return disk_number" \
                "get_tag_from_alac $ALAC_FILE disk_number"

  assertFalse   "should not return disk_total" \
                "get_tag_from_alac $ALAC_FILE disk_total"

  assertEquals  "should return a comment" \
                "Tapers: Debbie Ocoboc / Don Browning"     \
                "`get_tag_from_alac $ALAC_FILE comment`"

  assertFalse   "should not return composer" \
                "get_tag_from_alac $ALAC_FILE composer"

  assertEquals  "should have pieces of art" \
                "1" \
                "`get_tag_from_alac $ALAC_FILE art_pieces`"

  art_file=`get_tag_from_alac $ALAC_FILE art`
  assertTrue    "should have art file" \
                "[ -s "$art_file" ]"

  assertEquals  "return art_file" \
                "JPEG image data, EXIF standard" \
                "`file -b $art_file`"

  assertEquals  "artfile has correct md5 sum" \
                "ba738cea1bf5753e9fc48a08088258b4" \
                "`cat ${art_file} | /sbin/md5`"

  assertTrue    "should delete the alac file" \
                "rm '$ALAC_FILE'"

  assertTrue    "should have a flac file" \
                "[ -s '${TEST_FLAC1}' ]"
}

function test_delete_flag() {
  $(dirname $0)/../bin/flac2alac -d $TEST_FLAC1_COPY
  ALAC_FILE="${TEST_FLAC1_COPY/\.flac}.m4a"

  assertTrue    "should have an alac file" \
                "[ -s '${ALAC_FILE}' ]"

  assertFalse   "should not have a flac file" \
                "[ -s '${TEST_FLAC1_COPY}' ]"

}

function test_awkward_input_file() {
  $(dirname $0)/../bin/flac2alac "${TEST_FLAC_AWKWARD}"
  ALAC_FILE="${TEST_FLAC_AWKWARD/\.flac}.m4a"

  assertTrue    "should have an alac file" \
                "[ -s '${ALAC_FILE}' ]"

  assertEquals  "should return artist" \
                "John Mayer"     \
                "`get_tag_from_alac "${ALAC_FILE}" artist`"

}

function oneTimeSetUp() {
  source $(dirname $0)/../lib/convert.inc
  source $(dirname $0)/../lib/meta.inc
  source $(dirname $0)/../lib/system.inc
  TEST_FLAC1="$(dirname $0)/files/flac1.flac"
  TEST_FLAC1_COPY="$(dirname $0)/files/flac1_copy.flac"
  TEST_FLAC2="$(dirname $0)/files/flac2.flac"
  TEST_FLAC3="$(dirname $0)/files/flac3.flac"
  TEST_FLAC_AWKWARD="$(dirname $0)/files/--awkward file.flac"
  cp ${TEST_FLAC1} ${TEST_FLAC1_COPY}
}

function oneTimeTearDown() {
  __rmtemp
}

source $(dirname $0)/shunit/src/shunit2
# vim: set ft=sh :
