function test_has_afconvert() {
  assertTrue  "should return true" \
              "__has_afconvert"

  old_path=$PATH
  PATH="/bin"
  assertFalse "should return false when afconvert is not in the path" \
              "__has_afconvert"

  PATH=$old_path
}

function test_has_flac() {
  assertTrue  "should return true" \
              "__has_flac"

  PATH="/bin:/usr/bin"
  assertFalse "should return false if flac is not in the path" \
              "__has_flac"
}

function test_has_ffmpeg() {
  assertTrue  "should return true" \
              "__has_ffmpeg"

  PATH="/bin:/usr/bin"
  assertFalse "should return false if ffmpeg is not in the path" \
              "__has_ffmpeg"
}

function test_has_mp4v2() {
  assertTrue  "should return true" \
              "__has_mp4v2"

  PATH="/bin:/usr/bin"
  assertFalse "should return false if ffmpeg is not in the path" \
              "__has_mp4v2"
}

function test_mktemp() {
  assertTrue  "should make a tmp file should return a file path"                      \
              "[ ! -z $(__mktemp) ]"

  assertFalse "returned file should not yet exist"          \
              "[ -f $(__mktemp) ]"
}

function test_rmtemp() {
  assertTrue  "should return true if no files are to be deleted" \
              "__rmtemp"

  touch $(__mktemp)
  assertTrue  "should return true if files were deleted"  \
              "__rmtemp"
}


function oneTimeSetUp() {
  source $(dirname $0)/../lib/system.inc
  PATH="{HOME}/opt/mp4v2/bin:$PATH"
  ORG_PATH=$PATH
}

function tearDown() {
  PATH=$ORG_PATH
}

source $(dirname $0)/shunit/src/shunit2

# vim: set ft=sh
